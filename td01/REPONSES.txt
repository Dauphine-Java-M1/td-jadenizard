REPONSES

EX1

1) Cela fonctionne car il y a un constructeur par défaut de base qui met à 0 les variable int.

2) On ne peut pas accéder à x et y car ce sont des champs privés. Il faudrait faire des getter dans Point ou en changeant l'accessibilité des attributs (public par exemple).

3) Pour pas que n'importe qui puisse les modifier et donc protéger nos attributs.

4) Un accesseur est une fonction qui permet de retourner l'attribut et donc d'y accéder même s'il est privé. On pourrait le faire ici.

5)Le constructeur par défaut ,'existe plus maintenant qu'on a créé notre propre constructeur.


6) Cela ne change rien, cela fonctionne on appelle les arguments comme on veut

7) On crée un attribut statique qui compte le nombre d'instances de la classe ( on incréments dans le constructeur).

8) Il sait quel constructeur appeler grace aux paraître avec lequel on appelle le constructeur.

EX2

1) true/false car l'opération == teste si les deux objets ont les mêmes coordonnées et non la même valeur.

3) Il faut rajouter le type Point dans les chevrons de new ArrayList<>; Ensuite, p3 devrait être dans la liste à l'indice 0 car il est identique à p1 qui y est.


EX 3

2) Sans ce contrôle, on peut dépasser la capacité du tableau donnée par l'utilisateur. Une possibilité est d'ajouter une vérification sur la taille du tableau en argument.

5) brokenline.contains(null)) renvoie false. add(null) lui fonctionne mais lorsque l'on appeler contains() renvoie java.lang.NullPointerException.

6) On n'a pas besoin de changer. Les méthode de tableau sont transformées pour correspondre aux LinkedList.

EX 4
 
1) public void translate(int dx, int dy). On a plusieurs possibilité : multiplier/diviser x par dx et y par dy, remplacer les valeurs de x par dx et y par dy, ... etc.


5) Il y a eu une translation des deux cercles car ils partagent la même variable de"centre du cercle" qu'on a modifiée. Chaque cercle doit avoir son propre centre.

6) Cela fait un appel à la méthode translate de Point et nom de Circle.

9) Oui, car elle ne dépend pas de l'instance sur laquelle elle est appelée.

EXERCICE 5 

1) L'hériatge nous permettra de récupérer les attributs et les méthodes de cercle. Comme l'anneau est composé d'un cercle auquel on rajoute des caractéristiques, on peut voir l'anneau comme un enfant de Circle.

4) Cela appelle le toString de Circle, on doit Override cette méthode toString dans Ring pour que ce soit elle qui soit appelée.

